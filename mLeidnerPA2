## The assignment is to write a pair of functions that cache the inverse of a matrix.
## makeCacheMatrix - is creating a special "matrix" object that can cache its 
##inverse.
## cacheSolve – is a function that computes the inverse of the special "matrix" 
##returned by makeCacheMatrix above. If the inverse has already been calculated 
##(and the matrix has not changed), then cacheSolve should retrieve the inverse 
##from the cache.
##Computing the inverse of a square matrix can be done with the solve() function, 
##if X is a square invertible matrix, then solve(X) returns its inverse.

makeCacheMatrix <- function(x=matrix()) {   ##creates initial variable x
m <- NULL        ## stores the matrix in cache
get <- function() x     ## obtains initial matrix
setImatrix <- function(Imatrix) m <<- Imatrix ## assigns the inverse matrix to m
getImatrix <- function() m   ## obtains the cached inverse matrix
## return a list of functions as an object
list(get=get, setImatrix=setImatrix, getImatrix=getImatrix) 
}
cacheSolve <- function(x) { ## initializes the inverse of matrix x
m <- x$getImatrix() ## assigns the inverse of matrix
if(!is.null(m)){ ## checks if inverse matrix was found
message("Cached data has been found. Getting the result.")
return(m) ## returns the final result and escapes
}
else { ## if the inverse wasn't found
message("No cached data has been found. Calculating the inverse matrix...")
data <- x$get() ## obtains matrix from x
m <- solve(data) ## finds inverse matrix
x$setImatrix(m) ## assigns inverse matrix to x
message("Done.")
return(m) ## returns the final result and escapes
}
}
