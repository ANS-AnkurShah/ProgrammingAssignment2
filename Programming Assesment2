# Create a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL  # Initialize the inverse to NULL
  
  # Function to set the value of the matrix
  set <- function(y) {
    x <<- y
    inv <<- NULL  # Reset the cached inverse when the matrix changes
  }
  
  # Function to get the value of the matrix
  get <- function() x
  
  # Function to set the value of the inverse
  setInverse <- function(inverse) inv <<- inverse
  
  # Function to get the cached inverse
  getInverse <- function() inv
  
  # Return a list of the above functions
  list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}

# Compute or retrieve the cached inverse of the matrix
cacheSolve <- function(x, ...) {
  inv <- x$getInverse()  # Retrieve the cached inverse
  
  # Check if the inverse is already cached
  if (!is.null(inv)) {
    message("getting cached data")
    return(inv)
  }
  
  # If not cached, compute the inverse
  mat <- x$get()  # Get the matrix
  inv <- solve(mat, ...)  # Compute the inverse
  x$setInverse(inv)  # Cache the inverse
  
  inv  # Return the computed inverse
}

# Example Usage:

# Create a special "matrix" object
matrix1 <- makeCacheMatrix(matrix(c(4, 7, 2, 6), nrow = 2, ncol = 2))

# Compute and cache the inverse
inverse1 <- cacheSolve(matrix1)  # Compute the inverse and cache it

# Retrieve the cached inverse
inverse2 <- cacheSolve(matrix1)  # Fetch the cached inverse

# Print the inverses to verify correctness
print(inverse1)
print(inverse2)
