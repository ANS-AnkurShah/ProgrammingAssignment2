makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL  # Initialize the inverse to NULL
  
  # Set the matrix value
  set <- function(y) {
    x <<- y
    inv <<- NULL  # Reset the inverse to NULL whenever the matrix changes
  }
  
  # Get the matrix value
  get <- function() x
  
  # Set the inverse of the matrix
  setInverse <- function(inverse) inv <<- inverse
  
  # Get the inverse of the matrix
  getInverse <- function() inv
  
  # Return a list of functions to access and modify the matrix and its inverse
  list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
  inv <- x$getInverse()  # Check if the inverse is already cached
  
  # If the inverse is already cached, return it
  if (!is.null(inv)) {
    message("getting cached data")
    return(inv)
  }
  
  # If not, compute the inverse and store it in the cache
  mat <- x$get()  # Get the matrix
  inv <- solve(mat, ...)  # Compute the inverse of the matrix
  x$setInverse(inv)  # Cache the computed inverse
  
  inv  # Return the inverse
}
# Create a special matrix object
matrix1 <- makeCacheMatrix(matrix(c(4, 7, 2, 6), nrow = 2, ncol = 2))

# Compute and cache the inverse
inverse1 <- cacheSolve(matrix1)  # This will compute and cache the inverse

# Retrieve the cached inverse
inverse2 <- cacheSolve(matrix1)  # This will fetch the cached inverse

# Print both inverses to verify they are the same
print(inverse1)
print(inverse2)
