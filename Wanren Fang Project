# cacheMatrixFunctions: This function creates and returns a list containing both makeCacheMatrix and cacheSolve functions.

cacheMatrixFunctions <- function() {
  
  # Create a special "matrix" object that can cache its inverse
  makeCacheMatrix <- function(x = matrix()) {
    inv <- NULL
    
    set <- function(y) {
      x <<- y
      inv <<- NULL
    }
    
    get <- function() x
    
    setInverse <- function(inverse) inv <<- inverse
    
    getInverse <- function() inv
    
    list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
  }
  
  # Compute the inverse of the special "matrix" returned by makeCacheMatrix
  cacheSolve <- function(x, ...) {
    inv <- x$getInverse()
    
    if (!is.null(inv)) {
      message("getting cached data")
      return(inv)
    }
    
    data <- x$get()
    inv <- solve(data, ...)
    x$setInverse(inv)
    
    inv
  }
  
  list(makeCacheMatrix = makeCacheMatrix, cacheSolve = cacheSolve)
}

# Example usage
# Create the functions
functions <- cacheMatrixFunctions()

# Create a matrix
mat <- matrix(c(1, 2, 3, 4), 2, 2)

# Create a special matrix object
cacheMat <- functions$makeCacheMatrix(mat)

# Compute the inverse (or retrieve from cache if already computed)
inv <- functions$cacheSolve(cacheMat)
print(inv)
