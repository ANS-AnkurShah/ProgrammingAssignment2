##The first function, makeCacheMatrix creates a list containning a function to
##1. set the value of the matrix
##2. get the value of the matrix
##3. set the value of the inverse
##4. get the value of the inverse





makeCacheMatrix <- function( x=matrix()){
        matrix_inv <NULL
        
        
        set <- function(y){
                x <<- y
                matrix_inv <<- NULL
        }
        get <- function() x
        setinverse <- function( inverse) matrix_inv <<- inverse
        getinverse <- function() matrix_inv
        
        
        
        list(set = set, get = set, 
             setinverse = setinverse, getinverse = getinverse)
        
        
        
}





##The following function calculates the inverse of the special list created with the above function.
##However, it first checks to see if the inverse has already been calculated. 
##If so, it gets the inverse from the cache and skips the computation. 
##Otherwise, it calculates the inverse of the data and sets the value of the inverse in the cache via the setinverse function.



cacheSolve <- function(x, ...){
        matrix_inv <- x$getinverse()
        if(!is.null(matrix_inv)){
                message("getting cached data")
                return(matrix_inv)
        }
        
        
        my_matrix <- x$get()
        matrix_inv <- solve(my_matrix, ...)
        x$setinverse(matrix_inv)
        
        inv
        
}
