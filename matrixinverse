

## makeCacheMatrix function creates a "matrix" object that caches its inverse.
#1.  set value of the matrix
#2.  get value of the matrix
#3.  set value of the inverse
#4.  get value of the inversemakeCacheMatrix <- function(x = matrix()) {

    j <- NULL
    set <- function(y) {
      x <<- y
      j <<- NULL
    }
    get <- function() x
    setinverse <- function(solve) j <<- solve
    getinverse <- function() j
    list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
 
}
## `cacheSolve` function computes the inverse of the "matrix" returned by `makeCacheMatrix` above. 
#If the inverse has already been calculated (and the matrix has not changed), then`cacheSolve` should retrieve the inverse from the cache.

## when giving: Error in x$getinverse : $ operator is invalid for atomic vectors
cachesolve <- function(x, ...) { 
    i<- x$getinverse()
    if(!is.null(j)) {
      message("getting cached data")
      return(j)
    }
    data <- x$get()
    j<- solve(data, ...)
    x$setinverse(j)
    j

}
