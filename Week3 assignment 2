##This function creates a matrix that can cache its inverse
makeCacheMatrix<- function(x=matrix()) {
  p<-NULL
  set<-function(y) {
    x<<-y
    p<<-NULL
  }
  get<-function() x
  setInverse <- function(Inverse) p<<- Inverse
  getInverse <- function() p
  list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## This function computes the inverse of the matrix.
## If the inverse has already been calculated 
## then cacheSolve will retrieve the inverse from the cache
cacheSolve<- function(x, ...) {
  p<- x$getInverse()
  if(!is.null(p)) {
    message("getting cached data")
    return(p)
  }
  matrix<- x$get()   
  p<- Inverse(matrix,...)
  x$setInverse(p)
  p
}
