## Our aim in this experiment is to write a pair of functions, namely, 
## "makeCacheMatrix" and "cacheSolve" that cache the inverse of a matrix

## makeCacheMatrix is a function which creates a special "matrix" object that can 
## cache its inverse for the input (which is an invertible square matrix)

makeCacheMatrix <- function(x = matrix()) {

}


## cacheSolve is a function which computes the inverse of the special "matrix" 
## returned by makeCacheMatrix above. If the inverse has already been calculated 
## (and the matrix has not changed), then the cachesolve should retrieve the 
## inverse from the cache

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
}

> makeCacheMatrix <- function(x = matrix()) {
+     inv <- NULL
+     set <- function(y) {
+         x <<- y
+         inv <<- NULL
+     }
+     get <- function() x
+     setinv <- function(inverse) inv <<- inverse
+     getinv <- function() inv
+     list(set = set, get = get, setinv = setinv, getinv = getinv)
+ }
> cacheSolve <- function(x, ...) {
+     inv <- x$getinv()
+     if(!is.null(inv)) {
+         message("getting cached result")
+         return(inv)
+     }
+     data <- x$get()
+     inv <- solve(data, ...)
+     x$setinv(inv)
+     inv
+ }
> m <- matrix(rnorm(16),4,4)
> m1 <- makeCacheMatrix(m)
>  cacheSolve(m1)
           [,1]       [,2]        [,3]       [,4]
[1,] -0.2658163 -0.9799146  0.12900321  0.2414955
[2,]  0.2837571  0.5348256  0.07246904  0.8388356
[3,] -0.3521489 -1.0662375 -0.63090457 -0.7923140
[4,] -0.3460024  1.4505311  0.66229037  0.4856735