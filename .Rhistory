remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
evaluate(stdev, c(1.4, 3.6, 7.9, 8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(standard deviation, c(1.4, 3.6, 7.9, 8.8))
evaluate(sum, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(x, c(8,4,0))
evaluate(x{x[1]}, c(8,4,0))
evaluate(x[1], c(8,4,0))
evaluate([1], c(8,4,0))
evaluate(function(x){x[1]}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){length(x)}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
paste()
?paste()
?paste
paste("Programming", "is", "fun!")
submit
submit()
submit()
telegram("Good", "Night")
submit()
mad_libs(california, jouyous, dance )
mad_libs(place, jouyous, dance )
mad_libs(place, adjective, noun )
mad_libs(florida, happy, dance )
submit()
submit()
submit()
library(swirl)
ls()
rm(list())
rm(list(%p%))
rm(list("%p%""))
rm(list("boring_fuction"))
rm(list=ls())
swirl()
5+7
x<- 5+7
x
y<- x - 3
y
z<- c(1.1, 9., 3.14)
?c
z
c(z, 555, z)
z*2 +100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 +1000
my_div
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- gstwd()
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exist("mytest.R")
file.exists(mytest.R)
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive=True)
dir.create(file.path("testdir3"), recursive=True)
dir.create("testdir2, testdir3", file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
`:`
":"
?`:`
seq(1, 20)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with(my_seq))
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times =10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect <1
tf
num_vect >= 6
my_char <- "My", "name", "is"
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = "")
paste(my_char, collapse = " ")
my_name <- c(my_char, "your_name_here")
my_name
paste)(my_name, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep= " ")
paste(c("X", "Y", "Z", sep=""))
paste(1:3, c("X", "Y", "Z", sep=""))
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="")
paste(LETTERS, 1:4, sep="-")
x<- c(44, NA, 5, NA)
x*3
y<-rnorm(1000)
z<-rep(NA, 1000)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my-na = TRUE)
sum(my-na = NA)
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x, 3)
x[x=c(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo =11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dom(my_vector)
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?martix
?martix()
?matrix()
?matrix
my_martix <- matrix(1:20, 4, 5)
my_martix2 <- matrix(1:20, 4, 5)
my_martix2 <- matrix(1:20, nrow= 4, ncol= 5)
my_martix2 <- matrix(data=1:20, nrow= 4, ncol= 5)
my_martix2 <- matrix(data=1:20, nrow = 4, ncol = 5)
my_martix2 <- matrix(data =1:20, nrow = 4, ncol = 5)
my_martix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
info()
my_martix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
my_martix2 <- matrix(1:20, nrow = 4, ncol = 5)
my_martix2 <- matrix(1:20, nrow= 4, ncol= 5)
my_martix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
my_martix2 <- matrix(data = 1:20, nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2() <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 5, ncol = 4)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbin(patients, my_matrix)
cbind(patients, my_matrix)
my_data <- data.frames(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cname("patient", "age", "weight", "bp", "rating", "test")
cname <- c("patient", "age", "weight", "bp", "rating", "test")
cname <- c("patient", "age", "weight", "bp", "rating", "test")
cname <- c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(data.frame)
colnames(my_data) <- cnames
my_data
TRUE == FALSE
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
5!=7
5!==7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8\\ 6!=8 && 4>3.9
5 > 8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints<0)
all(ints >0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_fuction("My first function!")
boring_function("My first function!")
boring_function
submit
submit()
submit()
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(std, c(1.4,3.6, 7.9, 8.8))
evaluate(sdev, c(1.4,3.6, 7.9, 8.8))
evaluate(standarddeviation, c(1.4,3.6, 7.9, 8.8))
?standdard devaition
?standard devaition
evaluate(stdev, c(1.4,3.6, 7.9, 8.8))
evaluate(sd, c(1.4,3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x}, 1)
evaluate(function(x){c(8,4,0)}, 1)
evaluate(function(x){c(8,4,0)}, x=1)
evaluate(function(x){x}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){length(x)}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
paste("Programming", "is", "fun!")
submit()
telegram(I Love Programming)
telegram("I Love Programming")
submit()
submit()
submit()
mad_libs(spaceX, beautiful, color)
mad_libs(place, adjective, noun)
mad_libs
mad_libs(paste)
submit()
I%p%love%p%R
"I" %p% "Love" %p% "R"
"I" %p% "Love" "R"
"I" %p% "Love R"
"I" %p% "Love" %p% "R"
info()
submit()
"I" %p% "Love" %p% "R"
"I" %p% "Love"
"I" %p% "Love" %p% "R"
info()
skip()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_colors, range)
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
lapply(flags, length)
sapply(flags, length)
info()
skip()
sapply(flags, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
essc
esc
hYmvW18a2U31MVEc
6I46dpzazzDG4dcI
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head()
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6)
)
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(falgs$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrows
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replece=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips<- sample(c(0,1), 100, replace=TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips)
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean=10)
?rpois
rpois(5, lambda=10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <-colMeans(my_pois)
hist(mc)
hist(cm)
d1 <- Sys.Date()
class()
class(d1)
unclass(d1)
d1
ds <- as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- c("October 17 1986 08:24")
t3 <- "October 17 1986 08:24"
info()
t3 <- c("October 17 1986 08:24")
skip
skip()
strptime(t3, "%B %d %Y %H:%M")
t4 <- strptime(t3, "%B %d %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() >t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
data(cars)
help(cars)
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist, xlabel=Speed)
?plot
plot(x=cars$speed, y=cars$dist, xlab=Speed)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab= "Speed", ylab="Stopping Distance")
plot(x=cars$speed, main="My Plot")
plot(x=cars$speed, y=cars$dist, xlab= "Speed", ylab="Stopping Distance", main = "My Plot")
plot(cars, main ="My Plot")
plot(cars, main$subtimetle ="My Plot Subtile")
plot(cars, subtitle ="My Plot Subtile")
plot(cars, sub ="My Plot Subtile")
plot(cars, sub = "My Plot Subtitle")
plot(cars, color = "Red")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15)
)
?points
plot(cars, pch = 2)
load(mtcars)
data.frame(mtcars)
data(mtcars)
boxplot(mtcars)
?boxplot
boxplot(mtcars, mpg~cyl)
boxplot(formula = mpg~cyl, data = mtcars)
hist(mtcars$mpg)
swirl()
