install.package ("KernSmooth")
install.packages ("KernSmooth")
library (KernSmooth)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
sumation <- c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(1, 10, by=0.5)
seq(0, 10, by=0.5)
seq(0, 10, length=30)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
swirl()
bye()
q()
swirl()
library(swirl)
swirl()
num_vect <- c(0.5, 55,-10, 6))
num_vect <- c(0.5, 55,-10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Ethan")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
case
q()
?cor
q()
library(datasets)
data(iris)
?iris
iris
iris
data2 <- split(iris, iris$Species)
apply(data2, 1 , mean)
data2
apply(data2, c(1, 2) , mean)
sapply(data2, colMeans)
sapply(data2, colMeans(x[, c("Sepal.Length")]))
apply(data2, c(1, 2) , colMeans(x[, "Sepal.Length"]))
sapply(data2, function(x) colMeans(x[, "Sepal.Length"]))
sapply(data, function(x) colMeans(x[, "Sepal.Length"]))
sapply(data2, function(x) colMeans(x[, "Sepal.Length"]))
data2
sapply(data2, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
sapply(data2, function(x) colMeans(x[, "Sepal.Length"]))
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
warnings()
data(mtcars)
mtcars
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
debug(ls)
ls()
exit
x
e
x
g
h
e
r
fc
exit
ls
bar
fuck
x
cao
exit
q
q()
what
q
ls()
ls
ls
ls
ls
ls
q
q()
source('~/test.R')
n
n
exit
q
q()
setwd("e:/R/R_Programming/Assignment2/")
dir()
setwd("e:/R/R_Programming/Assignment2/ProgrammingAssignment2/")
source('E:/R/R_Programming/Assignment2/ProgrammingAssignment2/test.R')
makeVector()
x <- makeVector()
y <- c(1, 2, 3, 4, 5)
x <- makeVector(y)
x
cachemean(x)
cachemean(x)
x
source('E:/R/R_Programming/Assignment2/ProgrammingAssignment2/cachematrix.R')
A <- matrix(1:4, nrow = 2, ncol = 2)
makeCacheMatrix(A)
B <- makeCacheMatrix(A)
cacheSolve(B)
cacheSolve(B)
source('E:/R/R_Programming/Assignment2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(A)
B <- makeCacheMatrix(A)
cacheSolve(B)
cacheSolve(B)
