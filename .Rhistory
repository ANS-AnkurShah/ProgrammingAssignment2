library(datasets)
data(iris)
?iris
Sepal.length
Sepal.length(virginica)
iris
mean(iris[1])
mean(iris[1,])
by(iris[,1:3],iris$Species,function(x) mean(x,na.rm=T))
by(iris[,1:3],iris$Species,function(x) mean(x,na.rm=TRUE))
by(iris[,1:3],iris$Species,function(x) colMeans(x,na.rm=TRUE))
apply(iris[,1:4],2,mean)
apply(iris,2,mean)
apply(iris,1,mean)
apply(iris[,1:4],1,mean)
library(datasets)
data(mtcars)
?mtcars
apply(mtcars,2,mean)
lapply(mtcars,mean)
sapply(mtcars,cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
with(mtcars,tapply(hp,cyl,mean))
abs(209.21429-82.63636)
absolute(209.21429-82.63636)
?abs
View(mtcars)
View(mtcars)
View(mtcars)
?mtcars
with(mtcars,tapply(hp,cyl,mean))
abs(209.21429-82.63636)
abs(209.21429)-abs(82.63636)
abs
?abs
debug(ls)
ls
cachemean
source testFile
source cachemean
source (makeVector)
makeCacheMatrix
return(inve)
inve <<- NULL
return(inv)
}
test = function(mat) {
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r - rnorm(1000000)
r = rnorm(1000000)
mat1 = matrix(r,nrow=1000, ncol=1000)
test(mat1)
}
source(makeCacheMatrix)
source(cacheMatrix)
setwd("~/Documents/class/coursera/ProgrammingAssignment2")
dur = Sys.time() - start.time
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r,nrow=1000,ncol=1000)
test(mat1)
setwd("~/Documents/class/coursera/ProgrammingAssignment2")
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r,nrow=1000,ncol=1000)
test(mat1)
test
dur
mat
print(mat)
inv = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
}
