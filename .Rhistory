tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
debug(ls)
ls
ls(iris)
ok()
ok()
quit
C
ok
ok(à)
ok()
iris
iris
all.names <- .Internal(ls(envir, all.names, sorted))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
26.66364 -15.10000
mtcars_dt <- as.data.table(mtcars)
mtcars_dt <- as.data.table(mtcars)
library(datasets)
data(mtcars)
mtcars_dt <- as.data.table(mtcars)
mtcars_dt <- mtcars[,  .(mean_cols = mean(hp)), by = cyl]
debuggingState(on=FALSE)
iris
q
q
library(data.table)
install.packages("data.table")
library(data.table)
mtcars_dt <- as.data.table(mtcars)
mtcars_dt <- mtcars_dt[,  .(mean_cols = mean(hp)), by = cyl]
round(abs(mtcars_dt[cyl == 4, mean_cols] - mtcars_dt[cyl == 8, mean_cols]))
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg,mtcars$cyl,mean)
?with
?getmean
??getmean
source(cachematrix.R)
source("cachematrix.R")
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix(iris)
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix(iris)
# Write the following functions:
#
# makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
#
# cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
#If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should
#retrieve the inverse from the cache.
#
# Computing the inverse of a square matrix can be done with the solve function in R. For example,
"if X is a square invertible matrix, then solve(X) returns its inverse.
#
# For this assignment, assume that the matrix supplied is always invertible.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
# Write the following functions:
#
# makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
#
# cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
#If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should
#retrieve the inverse from the cache.
#
# Computing the inverse of a square matrix can be done with the solve function in R. For example,
"if X is a square invertible matrix, then solve(X) returns its inverse.
#
# For this assignment, assume that the matrix supplied is always invertible.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message('getting cached data')
return(m)
}
data <- x$get()
m <- solve(data)
x$setinv(m)
m
}
makeCacheMatrix(iris)
)
""
''
'
"
makeCacheMatrix(iris)
source("cacheMatrix.R")
list.files()
# Write the following functions:
#
# makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
#
# cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
#If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should
#retrieve the inverse from the cache.
#
# Computing the inverse of a square matrix can be done with the solve function in R. For example,
"if X is a square invertible matrix, then solve(X) returns its inverse.
#
# For this assignment, assume that the matrix supplied is always invertible.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message('getting cached data')
return(m)
}
data <- x$get()
m <- solve(data)%*% data
x$setinv(m)
m
}
"
# Write the following functions:
#
# makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
#
# cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
#If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should
#retrieve the inverse from the cache.
#
# Computing the inverse of a square matrix can be done with the solve function in R. For example,
"if X is a square invertible matrix, then solve(X) returns its inverse.
#
# For this assignment, assume that the matrix supplied is always invertible.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message('getting cached data')
return(m)
}
data <- x$get()
m <- solve(data)
x$setinv(m)
m
}
"
# Write the following functions:
#
# makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
#
# cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
#If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should
#retrieve the inverse from the cache.
#
# Computing the inverse of a square matrix can be done with the solve function in R. For example,
#if X is a square invertible matrix, then solve(X) returns its inverse.
#
# For this assignment, assume that the matrix supplied is always invertible.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message('getting cached data')
return(m)
}
data <- x$get()
m <- solve(data)
x$setinv(m)
m
}
list.files()
makeCacheMatrix(iris)
?inverse
?inv
??inverse
?inverse.gaussian
# Write the following functions:
#
# makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
#
# cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
#If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should
#retrieve the inverse from the cache.
#
# Computing the inverse of a square matrix can be done with the solve function in R. For example,
#if X is a square invertible matrix, then solve(X) returns its inverse.
#
# For this assignment, assume that the matrix supplied is always invertible.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message('getting cached data')
return(m)
}
data <- x$get()
m <- solve(data)%*% data
x$setinv(m)
m
}
b = matrix(data = 1:4, nrow = 2)
b
b = matrix(data = 1:4, nrow = 3)
b = matrix(data = 1:6, nrow = 3)
b
b = matrix(data = 1:9, nrow = 3)
b
inv(b)
inverse(b)
solve(bà)
solve(b)
makeCacheMatrix(b)
cacheSolve(b)
# Write the following functions:
#
# makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
#
# cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
#If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should
#retrieve the inverse from the cache.
#
# Computing the inverse of a square matrix can be done with the solve function in R. For example,
#if X is a square invertible matrix, then solve(X) returns its inverse.
#
# For this assignment, assume that the matrix supplied is always invertible.
makeCacheMatrix <- function(m = matrix()) {
i <- NULL
set <- function(y) {
m <<- matrix
i <<- NULL
}
get <- function() m
setinv <- function(inverse) i <<- inverse
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message('getting cached data')
return(m)
}
data <- x$get()
m <- solve(data)%*% data
x$setinv(m)
m
}
makeCacheMatrix(b)
cacheSolve(b)
b
# Write the following functions:
#
# makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
#
# cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
#If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should
#retrieve the inverse from the cache.
#
# Computing the inverse of a square matrix can be done with the solve function in R. For example,
#if X is a square invertible matrix, then solve(X) returns its inverse.
#
# For this assignment, assume that the matrix supplied is always invertible.
makeCacheMatrix <- function(m = matrix()) {
i <- NULL
set <- function(y) {
m <<- matrix
i <<- NULL
}
get <- function() {
m
}
setinv <- function(inverse) {
i <<- inverse
}
getinv <- function(){
i
}
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message('getting cached data')
return(m)
}
data <- x$get()
m <- solve(data)%*% data
x$setinv(m)
m
}
cacheSolve(b)
makeCacheMatrix(b)
list.dirs()
setwd("./R Programming/Assigne/ProgrammingAssignment2")
list.files()
source("cachematrix.R")
makeCacheMatrix(b)
m
makeCacheMatrix(b)
makeCacheMatrix(b)
makeCacheMatrix(b)
makeCacheMatrix(b)
makeCacheMatrix(b)
makeCacheMatrix(b)
cacheSolve(b)
b
makeCacheMatrix(iris)
cacheSolve(iris)
solve(b)
source("cachematrix.R")
makeCacheMatrix(iris)
solve(b)
cacheSolve(iris)
makeCacheMatrix(b)
cacheSolve(b)
# Write the following functions:
#
# makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
#
# cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
#If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should
#retrieve the inverse from the cache.
#
# Computing the inverse of a square matrix can be done with the solve function in R. For example,
#if X is a square invertible matrix, then solve(X) returns its inverse.
#
# For this assignment, assume that the matrix supplied is always invertible.
makeCacheMatrix <- function(m = matrix()) {
i <- NULL
set <- function(matrix) {
m <<- matrix
i <<- NULL
}
get <- function() {
m
}
setinv <- function(inverse) {
i <<- inverse
}
getinv <- function(){
i
}
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message('getting cached data')
return(m)
}
data <- x$get()
m <- solve(data)%*% data
x$setinv(m)
m
}
cacheSolve(b)
makeCacheMatrix(b)
c<-makeCacheMatrix(b)
makeCacheMatrix(c)
c
c<-makeCacheMatrix(b)
cacheSolve(c)
b
c<-makeCacheMatrix(iris)
cacheSolve(c)
matrix(data = c(1, 2, 3, 4), nrow = 2, byrow = TRUE)
t<-matrix(data = c(1, 2, 3, 4), nrow = 2, byrow = TRUE)
t
c<-makeCacheMatrix(t)
cacheSolve(c)
solve(t)
c
c$setinv()
c$setinv
