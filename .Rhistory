paste(1:3, c("X", "Y", "Z") sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na()
my_na <- is.na(my_data)
my_na
my_data
my_data==na
my_data == NA
sum(my_na)
print(my_data)
my_data
0 / 0
Inf - Inf
x
x [1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
print(vect)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbin(patients, my_matrix)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_dat
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 !== 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
load("~/Desktop/Coursera/myfunction.R")
install.packages("swirl")
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>5)
which(ints>7)
any(ints<0)
all(ints > 0)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x}, c(8, 4, 0))
evaluate(function(x){x}, [1], c(8, 4, 0))
evaluate(function(x){x}, [1,c(8, 4, 0)])
evaluate(function(x){x [1], c(8, 4, 0)])
evaluate(function(x){x[1], c(8, 4, 0)])
evaluate(function(x){x[1]}, c(8, 4, 0)])
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hello", "world")
submit()
submit()
mads_libs("World", "angry", "hut")
mads_libs("World", "angry", "hut")
mads_libs(place = "World", adjective = "angry", noun = "hut")
mad_libs(place = "World", adjective = "angry", noun = "hut")
submit()
sumit()
submit()
submit()
submit()
paste('I', "%p%",'love', "%p%",'R!')
paste('I', %p%,'love', %p%,'R!')
"I", "%p%","love", "%p%","R!"
"I" "%p%" "love" "%p%""R!"
"I" %p% "love" %p% "R!"
add2 <- function(x, y) {
x + y
}
add2(3,5)
above  <- function(x,n) {
use <- x > n
x[use]
}
above(x)
above(x, 10)
x <- 1:20
above(x, 10)
above  <- function(x,n = 10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
mmeans <- numeric(nc)
for(i in 1:nc) {
means[i} <- mean(y[,i])
}
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i} <- mean(y[,i])
}
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i} <- mean(x[,i])
}
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i])
}
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmen(airquality)
columnmean(airquality)
columnmean <- function(y removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], ra.rm = removeNA)
}
means
}
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], ra.rm = removeNA)
}
means
}
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
mydata <- rnorm(100)
mydata
sd(mydata)
sd(x=mydata)
sd(x=mydata, na.rm = FALSE)
f <- function (a, b) {}
f <- function (a, b) {
a^2
}
f(2)
F(4)
f(4)
f(2, 2)
f<- function(a, b) {
print(a)
print(b)
}
f(45)
myplot <- function(x, y, type="l", ...) {
plot(x, y, type = type, ...)
}
myplot
plot(sin, -pi, 2*pi)
?strptime
View(hw1_data)
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
View(andy)
length(andy$Day)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1, "Weight"]
andy[5, "Weight"]
andy[which(andy$Day == 30), "Weight"]
andy[which(andy[,"Day"] == 30), "Weight"]
subset(andy$Weight, andy$Day==30)
andy_start <- andy[1, "Weight"]
andy_end <- andy[30, "Weight"]
andy_loss <- andy_start - andy_end
andy_loss
files <- list.files("diet_data")
files
head(read.csv(files[3]))
files_full <- list.files("diet_data", full.names=TRUE)
files_full
head(read.csv(files[3]))
files_full <- list.files("diet_data", full.names=TRUE)
files_full
head(read.csv(files[3]))
View(andy)
View(john)
head(read.csv(diet_data/John.csv))
head(read.csv("diet_data/John.csv"))
andy_david <- rbind(andy, read.csv(files_full[2]))
View(andy_david)
day_25 <- andy_david[which(andy_david$Day == 25), ]
day_25
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)
View(andy_david)
median(dat$Weight)
View(andy_david)
View(andy_david)
median(dat$Weight)
median(dat$Weight, na.rm=TRUE)
dat_30 <- dat[which(dat[, "Day"] == 30),]
dat_30
median(dat_30$Weight)
View(andy_david)
View(andy_david)
View(dat)
weightmedian <- function(directory, day)  {
files_list <- list.files(directory, full.names=TRUE)   #creates a list of files
dat <- data.frame()                             #creates an empty data frame
for (i in 1:5) {
#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]  #subsets the rows that match the 'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE)      #identifies the median weight
#while stripping out the NAs
}
weightmedian(directory = "diet_data", day = 20)
weightmedian("diet_data", 4)
eightmedian("diet_data", 17)
weightmedian("diet_data", 17)
View(hw1_data)
names()
view(hw1_data)
View(hw1_data)
names()
names(1)
names(hw1_data)
head(x, n = 6L, ...)
head(x, n = 6L)
head(hw1_data, n = 3)
head(hw1_data, n = 2)
nc(hw1_data)
ncol(hw1_data)
nrow(hw1_data)
tail(hw1_data, n = 2)
subset(airquality, Temp > 80, select = c(Ozone, Temp))
subset(hw1_data, row = 47, select = Ozone))
subset(hw1_data, row = 47, select = Ozone)
subset(hw1_data, select = Ozone)
subset(hw1_data, select = Ozone)
subset(hw1_data, subset=47, select="Ozone")
subset(hw1_data, subset==47, select=="Ozone")
subset(hw1_data, subset=[47], select=="Ozone")
subset(hw1_data, subset[47], select=="Ozone")
subset(hw1_data, subset[47], select=="Ozone")
data[47,1]
hw1_data[47,1]
is.na(c(1, NA))
sum(!complete.cases(data[,1]))
sum(!complete.cases(hw1_data[,1]))
mean(hw1_data[complete.cases(hw1_data),1)
mean(hw1_data[complete.cases(hw1_data),1]
mean(hw1_data[complete.cases(hw1_data),1])
mean(hw1_data([complete.cases(hw1_data),1])
mean(hw1_data[complete.cases(hw1_data),1]
mean(data[complete.cases(data),1])
mean(hw1_data[complete.cases(hw1_data),1])
complete.cases(hw1_data),1
complete.cases(hw1_data)
mean(hw1_data[select="Ozone">31 & select="Temp">90,2])
mean(hw1_data["Ozone">31 & "Temp">90,2])
mean(hw1_data["Ozone">31,"Temp">90,2])
mean(hw1_data[Ozone>31,Temp>90,2])
mean(hw1_data[Ozone>31]&[Temp>90],2])
subset(hw1_data, Ozone > 31, Temp > 90)
subset(hw1_data, Ozone > 31, Temp > 90, select=Solar.R)
subset(hw1_data, Ozone > 31, Temp > 90, select=Solar.R)
mean(subset(hw1_data, Ozone>31 & Temp > 90)[,2])
mean(subset(hw1_data, Month == 6)[,4])
max(Month == 5, na.rm =FALSE,[,1])
max(Month == 5, na.rm =FALSE, Ozone)
max(subset(Month == 5), na.rm =FALSE, Ozone)
max(subset(hw1_data, Month == 5), na.rm =FALSE, Ozone)
max(subset(hw1_data, Month == 5), na.rm =FALSE, [,1])
max(subset(hw1_data, Month == 5)), na.rm =FALSE, [,1])
max(subset(hw1_data, Month == 5)) na.rm = FALSE, [,1])
max(subset(hw1_data, Month == 5)) na.rm = FALSE, [,1])
max(subset(hw1_data, hw1_data[,5]==5)[,1])
max(subset(hw1_data, hw1_data[,5]==5)[,1], na.rm = FALSE)
max(subset(hw1_data, hw1_data[,5]==5)[,1], na.rm = TRUE)
myplot <- function(x, y, type = "l", …) {
plot(x, y, type = type, …)
}
myplot <- function(x, y, type = "l", …) {
plot(x, y, type = type, …)
}
myplot <- function(x, y, type = "l", …) {
plot(x, y, type = type, …)
}
add2 <- function(x, y) {
x + y
}
add2 (,5)
add2 (3,5)
> aboveTen <- function(x) {
+   use <- x > 10 ## logical vector
+   x[use]
+ }
> aboveTen <- function(x) {
+   use <- x > 10 ## logical vector
+   x[use]
+ }
aboveTen <- function(x) {
use <- x > 10 ## logical vector
x[use]
}
> aboveTen(1:20)
aboveTen(1:20)
above <- function(x, n = 10) {
use <- x > n
x[use]}
> above(1:20, 12)
above(1:20, 12)
search()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
x
<- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
<- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f<- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f(4)
f(1)
f(2)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h
x
z
y
g
f
d
L
g
