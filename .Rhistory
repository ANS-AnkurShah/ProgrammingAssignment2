}
data <- x$get()
print(data)
cm <- matrix(data, ...)
# print(cm)
x$setmatrix()
# cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
# cm <- NULL
set <- function() {
# x <<- y
cm <<- NULL
}
get <- function() x
setmatrix <- function() cm <<- solve(x)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
print(cm)
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
print(data)
cm <- matrix(data, ...)
# print(cm)
x$setmatrix()
# cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
cacheSolve <- function(x, ...) {
print(cm)
cm <- x$getmatrix()
print(cm)
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
print(data)
cm <- matrix(data, ...)
# print(cm)
x$setmatrix()
# cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
# cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
setmatrix <- function() cm <<- solve(x)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
print(cm)
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
print(data)
cm <- matrix(data, ...)
# print(cm)
x$setmatrix()
# cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
setmatrix <- function() cm <<- solve(x)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
print(cm)
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
print(data)
cm <- matrix(data, ...)
# print(cm)
x$setmatrix()
# cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
setmatrix <- function() cm <<- solve(x)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
print(cm)
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
print(data)
cm <- matrix(data, ...)
# print(cm)
x$setmatrix()
# cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
setmatrix <- function() cm <<- solve(x)
print(cm)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
print(cm)
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
print(data)
cm <- matrix(data, ...)
# print(cm)
x$setmatrix()
# cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
setmatrix <- function(solve) cm <<- solve
print(cm)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
print(cm)
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
print(data)
cm <- matrix(data, ...)
# print(cm)
x$setmatrix()
# cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
setmatrix <- function() cm <<- solve(x)
print(cm)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
print(cm)
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
print(data)
cm <- matrix(data, ...)
# print(cm)
x$setmatrix()
# cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
setmatrix <- function() cm <<- solve(x)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
print(cm)
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
print(data)
cm <- matrix(data, ...)
# print(cm)
x$setmatrix()
# cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
solve(a)
makeCacheMatrix <- function(x) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
solve(x)
setmatrix <- function() cm <<- solve(x)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
print(cm)
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
print(data)
cm <- matrix(data, ...)
# print(cm)
x$setmatrix()
# cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
print(solve(x))
setmatrix <- function() cm <<- solve(x)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
print(cm)
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
print(data)
cm <- matrix(data, ...)
# print(cm)
x$setmatrix()
# cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
print(solve(x))
setmatrix <- function() cm <<- solve(x)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
print(cm)
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
print(data)
cm <- solve(data, ...)
# print(cm)
x$setmatrix()
# cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
setmatrix <- function() cm <<- solve(x)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
print(cm)
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
print(data)
cm <- solve(data, ...)
# print(cm)
x$setmatrix()
cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
setmatrix <- function() cm <<- solve(x)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
cm <- solve(data, ...)
x$setmatrix()
cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
setmatrix <- function(solve) cm <<- solve
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
cm <- solve(data, ...)
x$setmatrix()
cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
setmatrix <- function() cm <<- solve(x)
getmatrix <- function() cm
list(set = set, get = get, setmatrix = setmatrix,
getmatrix = getmatrix)
}
## cacheSolve retrieves the cached matrix
cacheSolve <- function(x, ...) {
cm <- x$getmatrix()
if (!is.null(cm)) {
message("getting cached matrix")
return(cm)
}
data <- x$get()
cm <- solve(data, ...)
x$setmatrix()
cm
}
## Return a matrix that is the inverse of 'x' - these are some tests
a <- matrix(data = 1:4, nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
cacheSolve(b)
a <- matrix(data = 1:9, nrow = 3, ncol = 3)
b <- makeCacheMatrix(a)
cacheSolve(b)
a
b
cacheSolve(b)
a <- matrix(data = c(1, 2, 3, 1, 2, 3, 1, 2, 3), nrow = 3, ncol = 3)
b <- makeCacheMatrix(a)
cacheSolve(b)
a <- matrix(data = c(2, 4, 6, 8), nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
cacheSolve(b)
a <- matrix(data = c(1,2,12,13), nrow = 2, ncol = 2)
b <- makeCacheMatrix(a)
cacheSolve(b)
cacheSolve(b)
