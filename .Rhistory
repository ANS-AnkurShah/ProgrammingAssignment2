install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages(/var/folders/pm/3s8tjth51p1gbm2c2jpt78080000gp/T//RtmpSzOmWB/downloaded_packages)
/var/folders/pm/3s8tjth51p1gbm2c2jpt78080000gp/T//RtmpSzOmWB/downloaded_packages
cd /var/folders/pm/3s8tjth51p1gbm2c2jpt78080000gp/T//RtmpSzOmWB/downloaded_packages
install.packages("swirl")
library("swirl")
swirl()
library("swirl")
swirl()
serach()
search()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x)
makeVector(1)
set(1)
makeVector()
m
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(5)
cachemean(x)
solve(A)
A
A=diag(5)
A
B=(rnorm(5),5,5)
B=matrix(rnorm(5),5,5)
B
solve(B)
5*A
A=5*A
solve(A)
getwd()
setwd("/Users/anna/coursera-r/ProgrammingAssignment2    ")
setwd("/Users/anna/coursera-r/ProgrammingAssignment2")
cd
dir
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(A)
A%set(1)
A$set(4)
x$set(4)
cacheSolve(A)
A=[1,1,1,1,1]
A=c(1,1,1,1,1)
A
cacheSolve(A)
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
cacheSolve(A)
source('~/coursera-r/ProgrammingAssignment2/makeVector.R')
A=c(1,1,1,1,1)
mean(A)
m<-Null
mean(A)
m<-Null
m<-NULL
View(cacheSolve)
View(cachemean)
cachemean(A)
cachemean(A,set)
vect <- c(c(1, 2, 5.0, 6.5, 0.1)
v <- makeVector(vect)
c <- c(1,1,1,0)
v <- makeVector(c)
v$get()
v$setmean(cachemean(v))
m<- 5*diag(5)
m
v$setmean(cachemean(v))
v$getmean()
v$set(c(5,5,5,100,85))
v$getmean()
v$setmean(cachemean(v))
v$getmean()
v$setmean(cachemean(v))
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
list(set = "set", get = "get",
setmean = "setmean",
getmean = :)
list(set = "set", get = "get",
setmean = "setmean",
getmean = "getmean")
l<-list(set = "set", get = "get",
setmean = "setmean",
getmean = "getmean")
l(1)
l[1]
l$set
l$setmean
vect <- c(1, 2, 5.0, 6.5, 0.1)
v <- makeVector(vect)
v
v$set(cachemean(v))
v
v$get()
v$getmean()
v$setmean(cachemean(v))
v$getmean()
cachemean(v)
source('~/coursera-r/ProgrammingAssignment2/makeVector.R')
View(makeCacheMatrix)
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
A<-5*diag(3)
A
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
B<-makeCacheMatrix(A)
B
B$get()
B$setinv()
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
B$setinv(cacheSolve(A))
B$setinv(cacheSolve(B))
B
B$get()
d<-B$setinv(cacheSolve(B))
d
B<-makeCacheMatrix(A)
d<-B$setinv(cacheSolve(B))
d
solve(A)
d<-B$setinv(cacheSolve(B))
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
B$set(3*diag(3))
B%get()
B$get()
B$setinv(cacheSolve(B))
d<-B$setinv(cacheSolve(B))
d
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
d<-B$setinv(cacheSolve(B))
d
d<-B$setinv(cacheSolve(B))
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
B<-10*diag(10)
B<-makeCacheMatrix(B)
B%get()
B$get()
B$get()
E<-makeCacheMatrix(B)
E$get()
e<-E$setinv(cacheSolve(E))
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
source('~/coursera-r/ProgrammingAssignment2/cachematrix.R')
