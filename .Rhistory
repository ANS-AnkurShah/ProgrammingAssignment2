install.packages("KernSmooth")
library
library()
library(KernSmooth)
q()
install.packages("swirl")
library("swirl")
switl()
swirl()
q()
if (true) {}
if (True) { x <- 4 }
if (x < True) { x <- 4 }
x <- T
if (x < True) { x <- 4 }
y <- if (x <> T) { 10 } else {0 }
x <- 10L
y <- if(x == 10) {99} else {20}
y
y <- if (x == 10) {99} else {20}
y
i <- 10
for(i in 1:20) {print(i)}
for(j in 1:20) {print(i)}
for(j in 1:20) {print(j)}
for (i in sql_along(x)){print i}
while
(i in 1:30){print i}
while(i in 1:30){print(i)}
i <- 10
while (i < 10) { print(i); i <- i + 1}
while (i < 10) { print(i); i <- i + 1}
i <- 0
while (i < 10) { print(i); i <- i + 1}
for (i in sql_along(x)){print i}
add2 (2,4)
add2 <- function(x, y) {
x + y
}
add2 (4,5)
x <- mean (10)
x
x <- rnorm (10)
x
x <- list(a = 1:5, b =rnorm(10))
x
lapply (x, mean)
x <- rnorm(10)
x
x <- rnorm(20)
x
x <- rnorm (10)
x
x <- rnorm (10)
x
set.seed(10)
x <- rnorm(10)
x
x <- rnorm(10)
x
set.seed(10)
x <- rnorm(10)
x
set.seed(10)
x <- rnorm(10)
x
x <- list(a = 1:5, b =rnorm(10))
lapply(x, mean)
x <- 1:4
x
class(x)
lapply (x, runif)
lapply (x, runifm, min = 0, max = 100)
lapply (x, runif, min = 0, max = 100)
x <- matrix (1:18, 3,6)
x
apply (x,2,sum)
apply (x,1,sum)
rowsums(x)
rowSums(x)
colSums(x)
str(array)
x <- c(rnorm(10),runif(10))
x
x <- c(rnorm(10),runif(10),rnorm(10,1))
x
str(gl)
test <- function (x) { x }
test(3)
test <- function (x) { invisible(x) }
test
test()
test(4)
p = test(4)
p
library(datasets)
data("iris")
?iris
data(iris)
?iris
iris
lapply (iris[,2],mean)
x <- subset(iris, Species == "virginica")$Sepal.Length
mean(x[!is.na(x)])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x['8'] - x['4']
debug(ls)
ls
ls
ls
x['8'] - x['4']
x['8']
x['4']
x['8'] - x['4']
x = numeric()
x+
;
x = numeric ()
x
numeric()
class(x)
x =  logic()
x = matrix()
x
cls
numeric()
get <- function() x
get
get <- function()
;
get <- function() x
get
x <- function() x
x
get <- function() x * 2
get
get()
remove(get)
remove(x)
get <- function() { x }
get
get <- function() x
get
?get
setwd("~/GitHub/ProgrammingAssignment2")
ls
source("cachematrix.R")
source("cachematrix.R")
makeCacheMatrix
source("cachematrix.R")
source("cachematrix.R")
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
source("cachematrix.R")
source("cachematrix.R")
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
cacheSolve(mat2)
