return(mat)
getInverse <- function() mat
a <- makeCacheMatrix(matrix(1:4,2))
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function will compute the inverse of the matrix
## returned by the function above. If the inverse
## was already computed, it will retrive it from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mat <- x$getInverse()
## checking to see if the inverse was already computed
if (! is.null(mat)) {
print ("getting data in the cache")
return(mat)
}
## computing the inverse of the matrix if needed
mat <- solve(x$get())
x$setInverse(mat)
mat
}
}
m
}
}
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b = a$getInverse()
a$get() %*% b
a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b = a$getInverse()
a$get() %*% b
a$get() %*% b
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
