ADD2<-FUNCTION(X,Y){X+Y
}
ADD2<-function(X,Y){X+Y
}
ADD2(2,3)
subsetv<-function(x,y){
use <- x>y
x[use]
}
x<-1:20
subsetv(x,10)
meancol <- funcyion(x,n){
for(i in 1:n){
sumcol<-sum(x[,i])
avg[i]<-sumcol/nrow(x)
}
avg
}
meancol <- function(x,n){
for(i in 1:n){
sumcol<-sum(x[,i])
avg[i]<-sumcol/nrow(x)
}
avg
}
x<-matrix(1:20,4,5)
x
meancol(x,ncol(x))
meancol <- function(x){
nc<-ncol(x)
avg<-numeric(nc)
for(i in 1:nc){
sumcol<-sum(x[,i])
avg[i]<-sumcol/nrow(x)
}
avg
}
meancol(x)
meancol <- function(x){
nc<-ncol(x)
avg<-numeric(nc)
for(i in 1:nc){
sumcol<-sum(x[,i])
avg[i]<-sumcol/nrow(x)
}
avg
}
Add<-function(x,y){
x+y
}
Add(5,4)
ADD2<-FUNCTION(X,Y){X+Y
}
subsetv<-function(x,y){
use <- x>y
x[use]
}
x<-c(2,3,4)
subsetv(x,10)
subsetv(x,2)
x<-matrix()
is.na(x)
is.NULL(x)
is.null(x)
x
^l
^L
(^L)
source('~/Downloads/ProgrammingAssignment2-master/cachematrix.R')
## Return a matrix that is the inverse of 'x'
x<-matrix(c(4,2,7,6),nrow=2,ncol=2)
mat<-makeCacheMatrix(x)
cachesolve(mat)
cacheSolve(mat)
source('~/Downloads/ProgrammingAssignment2-master/cachematrix.R')
source('~/Downloads/ProgrammingAssignment2-master/cachematrix.R')
