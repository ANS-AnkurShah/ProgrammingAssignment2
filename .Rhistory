makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y){
x <<- y
s <<- NULL
}
get <- function() {x}
setsolve <- function(solve) {s <<- solve}
getsolve <- function() {s}
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
x = matrix (1:4, nrow=2, ncol=2)
cacheSolve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x = 1:10
cachemean(x)
debug(cachemean)
cachemean(x)
debug(cacheSolve)
cacheSolve(x)
x <- matrix(1:4, nrow=2, ncol=2)
x
makeCacheMatrix(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y){
x <<- y
s <<- NULL
}
get <- function() {x}
setsolve <- function(solve) {s <<- solve}
getsolve <- function() {s}
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
x <- matrix(1:4, nrow=2, ncol=2)
makeCacheMatrix(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y){
x <<- y
s <<- NULL
}
get <- function() {x}
setsolve <- function(solve) {s <<- solve}
getsolve <- function() {s}
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
z <- makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- z$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- z$get()
s <- solve(data, ...)
z$setsolve(s)
s
}
x = matrix(1:4, nrow=2, ncol=2)
makeCacheMatrix(x)
cacheSolve(x)
x <- matrix(rep.int(1:10,10), nrow=10, ncol=10)
x
makeCacheMatrix(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y){
x <<- y
s <<- NULL
}
get <- function() {x}
setsolve <- function(solve) {s <<- solve}
getsolve <- function() {s}
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
z <- makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- z$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- z$get()
s <- solve(data, ...)
z$setsolve(s)
s
}
x <- matrix(rep.int(1:10,10), nrow=10, ncol=10)
x
makeCacheMatrix(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y){
x <<- y
s <<- NULL
}
get <- function() {x}
setsolve <- function(solve) {s <<- solve}
getsolve <- function() {s}
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
z <- makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- z$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- z$get()
s <- solve(data, ...)
z$setsolve(s)
s
}
x <- matrix(1:1000, nrow=10, ncol=10)
x
makeCacheMatrix(x)
cacheSolve(x)
x <- matrix(1:4, nrow=2, ncol=2)
makeCacheMatrix(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y){
x <<- y
s <<- NULL
}
get <- function() {x}
setsolve <- function(solve) {s <<- solve}
getsolve <- function() {s}
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
z <- makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- z$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- z$get()
s <- solve(data, ...)
z$setsolve(s)
s
}
X <- matrix(1:4, nrow=2, ncol=2)
makeCacheMatrix(x)
cacheSolve(x)
x
View(X)
makeCacheMatrix(X)
cacheSolve(X)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y){
x <<- y
s <<- NULL
}
get <- function() {x}
setsolve <- function(solve) {s <<- solve}
getsolve <- function() {s}
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
z <- makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- z$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- z$get()
s <- solve(data, ...)
z$setsolve(s)
s
}
x <- matrix(1:4, nrow=2, ncol=2)
x
makeCacheMatrix(x)
cacheSolve(x)
x <- matrix(c(4,3,3,2), nrow=2, ncol=2)
makeCacheMatrix(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y){
x <<- y
s <<- NULL
}
get <- function() {x}
setsolve <- function(solve) {s <<- solve}
getsolve <- function() {s}
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
z <- makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- z$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- z$get()
s <- solve(data, ...)
z$setsolve(s)
s
}
x<-matrix(c(4,3,3,2),nrow=2,ncol=2)
x
makeCacheMatrix(x)
cacheSolve(x)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(makeCacheMatrix(1:4,2,2))
cacheSolve(makeCacheMatrix(matric(1:4,2,2))
)
cacheSolve(makeCacheMatrix(matrix(1:4,2,2)))
