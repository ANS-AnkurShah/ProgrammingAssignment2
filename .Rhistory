demo()
recursion
recursion()
help()
demo(recursion)
demo(scoping)
demo(graphics)
demo(glm.vr)
demo(smooth())
cube <- function(x,n) {x^3}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f93)
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
h <- function(x, y = NULL, d = 3L){
z <- cbind(x, d)
if(!is.null(y))
z - z + y
else
z <- z + f
g <- x + y / z
if(d== 3L)
return(g)
g <- g + 10
g
install.packages("swirl")
packageVersion(swirl)
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
install_from_swirl("R Programming")
swrilt
swirl
swirl()
install
install()
help
help()
install.packages(scatterplot3d)
install.packages(statterd3)
install.packages("scatterD3")
library(scatterD3)
scatterD3()
install.packages("scatterplot3d")
scatterplot3d::
library(scatterplot3d)
with(mtcars, {
scatterplot3d(disp,   # x axis
wt,     # y axis
mpg,    # z axis
main="3-D Scatterplot Example 1")
})
library(scatterplot3d)
with(mtcars, {
scatterplot3d(disp, wt, mpg,        # x y and z axis
color="blue", pch=19, # filled blue circles
type="h",             # lines to the horizontal plane
main="3-D Scatterplot Example 2",
xlab="Displacement (cu. in.)",
ylab="Weight (lb/1000)",
zlab="Miles/(US) Gallon")
})
library(scatterplot3d)
# create column indicating point color
mtcars$pcolor[mtcars$cyl==4] <- "red"
mtcars$pcolor[mtcars$cyl==6] <- "blue"
mtcars$pcolor[mtcars$cyl==8] <- "darkgreen"
with(mtcars, {
s3d <- scatterplot3d(disp, wt, mpg,        # x y and z axis
color=pcolor, pch=19,        # circle color indicates no. of cylinders
type="h", lty.hplot=2,       # lines to the horizontal plane
scale.y=.75,                 # scale y axis (reduce by 25%)
main="3-D Scatterplot Example 4",
xlab="Displacement (cu. in.)",
ylab="Weight (lb/1000)",
zlab="Miles/(US) Gallon")
s3d.coords <- s3d$xyz.convert(disp, wt, mpg)
text(s3d.coords$x, s3d.coords$y,     # x and y coordinates
labels=row.names(mtcars),       # text to plot
pos=4, cex=.5)                  # shrink text 50% and place to right of points)
# add the legend
legend("topleft", inset=.05,      # location and inset
bty="n", cex=.5,              # suppress legend box, shrink text 50%
title="Number of Cylinders",
c("4", "6", "8"), fill=c("red", "blue", "darkgreen"))
})
library(datasets)
iris
apply(iris[, 1:4], 2, mean)
apply(mtcars[,1:8],2,mean)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
mean(mtcars[mtcars$cyl == "8"]$hp) - mean(mtcars[mtcars$cyl == "4"]$hp)
mean(mtcars[,mtcars$cyl == "8"]$hp) - mean(mtcars[,mtcars$cyl == "4"]$hp)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
apply(iris[ 1:4], 2, mean)
apply(iris[1:4,], 2, mean)
apply(iris[, 1:4], 2, mean)
mean(iris[iris$Species == "virginica",]$Sepal.Length)
makePosDefMat <- function(n=4){
x <- matrix(runif(n*n),n,n)
posDefMat a a
[1] 12 13 14
> makeVector(v1)$set(a)
> makeVector(v1)$get()
matrix(c(1, 3, 2, 4),nrow=2,ncol=2)
makePosDefMat <- function(n=4){
+     x <- matrix(runif(n*n),n,n)
+     posDefMat a a
makePosDefMat <- function(n=4){
+     x <- matrix(runif(n*n),n,n)
+     posDefMat a a
make_random_matrix <- function(n = 4) { matrix(runif(n * n), ncol=n)} # I
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
makeCacheMatrix <- function(mtx = matrix()) {
inverse <- NULL
set <- function(x) {
mtx <<- x;
inverse <<- NULL;
}
get <- function() return(mtx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
makeCacheMatrix <- function(mtx = matrix()) {
inverse <- NULL
set <- function(x) {
mtx <<- x;
inverse <<- NULL;
}
get <- function() return(mtx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
cacheSolve <- function(mtx, ...) {
inverse <- mtx$getinv()
if(!is.null(inverse)) {
message("Getting cached data...")
return(inverse)
}
data <- mtx$get()
invserse <- solve(data, ...)
mtx$setinv(inverse)
return(inverse)
}
View(cacheSolve)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
cacheSolve <- function(mtrx, ...) {
inverse <- mtrx$getinv()
if(!is.null(inverse)) {
message("Getting cached data")
return(inverse)
}
data <- mtrx$get()
invserse <- solve(data, ...)
mtrx$setinv(inverse)
return(inverse)
}
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
function(mtrx = matrix()) {
inverse <- NULL
set <- function(x) {
mtrx <<- x;
inverse <<- NULL;
}
get <- function() return(mtrx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
View(makeCacheMatrix)
View(makeCacheMatrix)
makeCacheMatrix <- function(mtrx = matrix()) {
inverse <- NULL
set <- function(x) {
mtrx <<- x;
inverse <<- NULL;
}
get <- function() return(mtrx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
solve(m)
cacheSolve(m)
cachesolve(m)
cacheSolve(m)
getwd(C:\\Users\\patemic\\Documents\\GitHub\\ProgrammingAssignment2)
setwd(C:\\Users\\patemic\\Documents\\GitHub\\ProgrammingAssignment2)
setwd(C:/Users/patemic/Documents/GitHub/ProgrammingAssignment2)
setwd(C:/Users/patemic/Documents/GitHub/ProgrammingAssignment2/)
setwd("C:/Users/patemic/Documents/GitHub/ProgrammingAssignment2"")
ls
setwd("C:/Users/patemic/Documents/GitHub/ProgrammingAssignment2)
ls
setwd("C:/Users/patemic/Documents/GitHub/ProgrammingAssignment2")
ls
ls()
cachesolve()
cacheSolve()
file.edit("cachesolve.r")
file.edit("makeChacheMatrix.r")
file.edit("cachesolve.r")
file.edit("makeChacheMatrix.r")
View(cacheSolve)
View(makeCacheMatrix)
