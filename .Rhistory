x$get()
x <- c (1,3,5,7,8,3,34,1)
x$get()
y <- function()x
y
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector
makeVector(c(1,2,3,4,5,6))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(1,3,4,5,6))
cachemean(c(1,2,3,4,5,6))
cachemean(1,2,3,4,5,6)
numeric(10)
numeric(norm(10))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(1,2,3,4,5,6))
makeVector(x=c(1,2,3,4,5,6))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x=c(1,2,3,4,5,6))
x <- c(1,2,3,4,5,6)
makeVector(x)
cachemean(x)
mvec <- makeVector()
x <1L4
x<-1:4
mvec$set(x)
mvec$get()
mvec$getmean()
mvec$setmean(12)
mvec$getmean()
?$
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y = matrix) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setslove = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached inverse matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
## Return a matrix that is the inverse of 'x'
}
matrix(1:9,3,3)
x <-matrix(1:9,3,3)
mmatrix <- makeCacheMatrix()
mmatrix$set(x)
mmatrix$get()
mmatrix$setslove()
mmatrix$setslove(x)
mmatrix$getsolve(x)
mmatrix$getsolve()
mvec$setmean()
y<-1:4
mvec$get(y)
mvec$get()
y<-norm(10)
getnorm(10)
y<-rnorm(10)
y
mvec$set()
mvec$set(y)
mvec$get(y)
mvec$get()
mvec$getmean()
mvec$getmean(y)
mvec <- makeVector(y)
mvec$set(x)
mvec$get()
x <-1:4
y <-1:4
x <-rnorm(10)
mvec<-makeVector(x)
mvec$set(y)
mvec$get()
mvec$setmean(x)
mvec$getmean(x)
mvec$getmean()
mvec$setmean(10)
mvec$getmean()
cachemean(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
cachemean()
cachemean(y)
cachemean(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mvct <- makeVector()
mvct(10)
mvct
x <- rnorm(10)
x
mkvc <- makeVector(x)
mkvc
mkvc(10)
mkvc
cachemean(x)
x$getmean
x$getmean(x)
x
> makeVector <- function(x = numeric()) {
+     m <- NULL
+     set <- function(y) {
+         x <<- y
+         m <<- NULL
+     }
+     get <- function() x
+     setmean <- function(mean) m <<- mean
+     getmean <- function() m
+     list(set = set, get = get,
+          setmean = setmean,
+          getmean = getmean)
+ }
> makeVector <- function(x = numeric()) {
+     m <- NULL
+     set <- function(y) {
+         x <<- y
+         m <<- NULL
+     }
+     get <- function() x
+     setmean <- function(mean) m <<- mean
+     getmean <- function() m
+     list(set = set, get = get,
+          setmean = setmean,
+          getmean = getmean)
+ }
makeVector <- function(x = numeric()) {
+     m <- NULL
+     set <- function(y) {
+         x <<- y
+         m <<- NULL
+     }
+     get <- function() x
+     setmean <- function(mean) m <<- mean
+     getmean <- function() m
+     list(set = set, get = get,
+          setmean = setmean,
+          getmean = getmean)
+ }
makeVector
makeVector(x)
makeVector(x)
makeVector(x)
test<-makeVector(x)
test$set()
test$set(x)
test$get(x)
test$get()
mean(x)
test$setmean(mean(x))
test$getmean()
cachemean(x)
cachemean()
cachemean(15)
gogogo <- cachemean(x)
cachemean (test)
z <- matrix(1:9,3,3)
z
solve(z)
z <- matrix(rnorm(9),3,3)
z
solve(z)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y = matrix) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setslove = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached inverse matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
## Return a matrix that is the inverse of 'x'
}
test <- makeCacheMatrix(z)
i <- solve(z)
test$setslove(i)
test$getsolve()
cacheSolve(test)
k <- matrix(rnorm=1:9, 3,3)
k <- matrix(rnorm(9), 3,3)
k
solve(k)
test1 <- makeCacheMatrix()
test1$set(k)
test1$get()
test$set(k)
test$get()
