n<-matrix(c(7,-0.1,3,9,6,1,2,-5,-9), nrow=3, ncol=3)
makeCacheMatrix<-function(n = matrix()) { # 'n' is the input matrix and has to be specified before, e.g. type 'n<-matrix(c(7,-0.1,3,9,6,1,2,-5,-9), nrow=3, ncol=3)'
m1 <- NULL                              # In order not to get confused with variables used in 'makeVector' I'm renaming the variables in the following way: x=n, y=p, m=m1;
set <- function(p) {                    # 1st behavior:
n <<- p                               ### the matrix 'p' is assigned to 'n', which is in the parent environment
m1 <<- NULL                           ### makes sure m1 is NULL
}
get <- function() n                     # 2nd behavior: get() spits out the value of matrix n
setinverse <- function(inverse) m1 <<- inverse # 3rd behavior: setinverse() assigns the value of 'inverse' to 'm1'
getinverse <- function() m1             # 4th behavior: getinverse() returns the value of 'm1'
list(set = set, get = get,              # defines a list with four elements: set, get, setinverse and getinverse
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve<-function(n, ...) {
m1 <- n$getinverse()                    # calls the getinverse() function on'n'
if(!is.null(m1)) {                      # checks to see whether the result is NULL
message("getting cached data")
return(m1)
}
data <- n$get()                         # 'data' calls the get() function on 'n'
m1 <- solve(data, ...)                  # assigns the inverse of data (-> n) to m1
n$setinverse(m1)                        # the function setinverse () sets the inverse on 'n'
m1                                      # prints the inverse of 'n'
}
myMatrix<-makeCacheMatrix(n)
cacheSolve(myMatrix)
