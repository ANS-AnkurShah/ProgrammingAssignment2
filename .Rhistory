m <- matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2, byrow = TRUE)
solve(m)
m <- matrix(c(7,3, 2, 18), nrow = 2, ncol = 2, byrow = TRUE)
solve(m)
myfunction <- function(x) { y <<- x }
y
y # variable 'y' does not exist in the global environment or in any environment at this point
myfunction(0) # assign argument 'x' to external variable 'y' when invoked
y[1]
a <- 1867
b <- 1763
myfunc <- function(a) {
print(a)  # fetch variable 'a' from parent environment outside myfunc() function
a <- 1776 # create a new variable 'a' within the current environment inside myfunc() function
print(a)  # fetch variable 'a' from the current environment inside myfunc() function
a <<- a   # assign value of variable 'a' in the current environment to variable 'a' in the parent environment outside myfunc() function
rm(a)     # delete variable 'a' from the current environment inside myfunc() function
print(a)  # fetch variable 'a' from parent environment outside myfunc() function
a <- b    # assign value of variable 'b' from parent environment to new variable 'a' in the current environment inside myfunc() function
print(a)  # fetch variable 'a' from the current environment inside myfunc() function
}
print(a)
myfunc(a)
a
b
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- makeVector(c(1, 2, 3, 4, 5))
v
v$get()
v$getmean()
cachemean(v)
m
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
v <- makeVector(c(1, 2, 3, 4, 5))
v$get()
v$getmean
v$getmean()
v <- makeVector(c(1, 2, 3, 4, 5))
v$getmean()
View(m)
View(m)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
v <- makeVector(c(1, 2, 3, 4, 5))
m
v$set()
v$get()
v$getmean()
cachemean(v)
v$getmean()
m
rm(m)
rm(a)
rm(b)
rm(v)
rm(y)
View(cachemean)
rm(cachemean)
View(makeVector)
rm(makeVector)
rm(myfunc)
rm(myfunction())
rm(myfunction)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
v <- makeVector(c(1, 2, 3, 4, 5))
v$get()
v$getmean
v$getmean()
v$set()
v$set(c(10, 20))
v$get()
v <- makeVector(c(1, 2, 3, 4, 5))
v$get()
cachemean(v)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(v)
v$getmean()
?solve
m <- matrix(c(1,2,3,4), nrow = 2, ncol = 2, byrow = TRUE)
solve(m) %*% m
m
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL
set <- function(y)
{
x <<- y
inverseMatrix <<- NULL
}
get <- function() x
setInverse <- function(z) inverseMatrix <<- z
getInverse <- function() inverseMatrix
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
m <- matrix(c(1,2,3,4), nrow = 2, ncol = 2, byrow = TRUE)
q <- matrix(c(1,2,3,4), nrow = 2, ncol = 2, byrow = TRUE)
rm(m)
m <- makeCacheMatrix(q)
m$get()
m$getInverse()
cacheSolve <- function(x, ...) {
inverseMatrix <- x$getInverse()
if(!is.null(inverseMatrix))
{
message("getting cached inverse")
return(inverseMatrix)
}
data <- x$get()
inverseMatrix <- solve(data) %*% data
x$setInverse(inverseMatrix)
inverseMatrix
}
m$getInverse()
cacheSolve(m)
m$getInverse()
rm(v)
q <- matrix(c(1,2,3,4), nrow = 2, ncol = 2, byrow = TRUE)
## The function below creates a list of 4 functions that work on matrices
##      set             - directly (without having to call makeCacheMatrix) sets the matrix & wipes out any cached Inverse
##      get             - returns the matrix
##      setInverse      - creates the inverse matrix - only cacheSolve should use this.  It shoud not be called directly
##      getInverse      - returns the matrix's inverse or null if cacheSolve has not been run
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL
set <- function(y)
{
x <<- y
inverseMatrix <<- NULL
}
get <- function() x
setInverse <- function(z) inverseMatrix <<- z
getInverse <- function() inverseMatrix
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
inverseMatrix <- x$getInverse()
if(!is.null(inverseMatrix))
{
message("getting cached inverse")
return(inverseMatrix)
}
data <- x$get()
inverseMatrix <- solve(data) %*% data
x$setInverse(inverseMatrix)
inverseMatrix
}
m <- makeCacheMatrix(q)
cacheSolve(m)
View(cachemean)
rm(cachemean)
rm(makeVector)
v <- makeVector(c(1, 2, 3, 4, 5))
SOURCE(fOO.R)
source("FOO.r")
source("foo.R")
source(foo.R)
source(foo.R)
source("foo.R")
source('foo.R')
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y)   ## lets you set the values directly
{
x <<- y
m <<- NULL
}
get <- function() x   # lets you get the values
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
rm(m)
rm(q)
v <- makeVector(c(1, 2, 3, 4, 5))
cachemean(v)
debug(makeVector)
View(makeVector)
debug(makeVector)
l
makeVector(c(1, 2, 3, 4, 5))
debug(set)
q <- matrix(c(1,2,3,4), nrow = 2, ncol = 2, byrow = TRUE)
solve(q)
solve(q) %*% q
q <- matrix(c(4,2,7,6), nrow = 2, ncol = 2, byrow = TRUE)
q
q <- matrix(c(4,7,2,6), nrow = 2, ncol = 2, byrow = TRUE)
solve(q)
c <- rbind(c(1, -1/4), c(-1/4, 1))
solve(c)
