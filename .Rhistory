getwd()
m <- NULL
class(m)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## This function accepts a square invertible matrix as a parameter
makeCacheMatrix <- function(x = matrix()) {
m <- NULL   ##Should this not be a null matrix?
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setimat <- function(solve) m <<- solve
getimat <- function() m
list(set = set, get = get,
setimat = setimat,
getimat = getimat)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getimat()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setimat(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
##The following function calculates the mean of the special "vector" created with the above function. However, it first checks to see if the mean has already been calculated. If so, it gets the mean from the cache and skips the computation. Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function.
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<-makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
cachemean(a)
cachemean(a)
a$get()
a$getmean()
a$get()
cachemean(a)
a$setmean(0)
a$getmean()
a$get()
cachemean(a)
a <- makeVector(c(5, 25, 125, 625))
a$get()
cachemean(a)
crazy <- function() {
x <<- 3.14      # variable x in the containing environment (global in this case) is updated to be 3.14
print(x)        # since no local variable ‘x’ exists within function ‘crazy’ R searches the containing environments
{ print(x);     # this is to demonstrate the function, not a code block, is the smallest environment in R
x <- 42; print(x)   # local variable ‘x’ is declared (created) and assigned the value 42; overrides the variable ‘x’ in
}                   # the containing environment
print(x)            # since local variable ‘x’ now exists within the function there is no need to search the containing
}                           # environment (global in this case)
x <- 0
crazy()
x
x <- 0
x
crazy()
x
a <- makeVector(c(5, 25, 125, 625))
a$get()
a$getmean()
cachemean(a)
m
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getimat()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getimat()
list(set = set, get = get,
setimat = setimat,
getimat = getimat)
?list
ls()
