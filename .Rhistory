library(R.cache)
saveCache(A_inverse, key=NULL, sources=NULL, suffix=".Rcache", comment=NULL,
pathname="C:/Users/m119979/Documents/GitHub/ProgrammingAssignment2",
dirs=NULL, compress=getOption("R.cache::compress", FALSE), ...)
saveCache(A_inverse, key=NULL, sources=NULL, suffix=".Rcache", comment=NULL,
pathname="C:/Users/m119979/Documents/GitHub/ProgrammingAssignment2",
dirs="C:/Users/m119979/Documents/GitHub/ProgrammingAssignment2",
compress=getOption("R.cache::compress", FALSE), ...)
saveCache(A_inverse, key=NULL, sources=NULL, suffix=".Rcache", comment=NULL,
pathname="C:/Users/m119979/Documents/GitHub/ProgrammingAssignment2",
dirs="C:/Users/m119979/Documents/GitHub/ProgrammingAssignment2",
compress=getOption("R.cache::compress", FALSE))
saveCache(A_inverse, key=NULL, sources=NULL, suffix=".Rcache", comment=NULL,
pathname="C:/Users/m119979/Documents/GitHub/ProgrammingAssignment2/cache",
dirs="C:/Users/m119979/Documents/GitHub/ProgrammingAssignment2/cache",
compress=getOption("R.cache::compress", FALSE))
x <- matrix(c(1, 2, 4, 2, 3, 1, 5, 7, 8), nrow=3, ncol=3)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
solve(x)
}
cachesolve(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
solve(x)
}
cachesolve(x)
x_inverse<-solve(x)
cacheSolve <- function(x,  ...) {
## Return a matrix that is the inverse of 'x'
x_inverted<-solve(x)
}
cacheSolve(x)
cacheSolve <- function(x,  ...) {
## Return a matrix that is the inverse of 'x'
x_inverted<-solve(x)
}
cacheSolve(x)
cacheSolve <- function(x,  ...) {
## Return a matrix that is the inverse of 'x'
x<-matrix(c(1, 2, 4, 2, 3, 1, 5, 7, 8), nrow=3, ncol=3)
x_inverted<-solve(x)
}
cacheSolve(x)
x<-matrix(c(1, 2, 4, 2, 3, 1, 5, 7, 8), nrow=3, ncol=3)
cacheSolve <- function(x,  ...) {
## Return a matrix that is the inverse of 'x'
x_inverted<-solve(x)
}
cacheSolve(x)
cacheSolve <- function(x,  ...) {
## Return a matrix that is the inverse of 'x'
x_inverted<-solve(x)
x_inverted_matrix <-x_inverted<-solve(x)
}
cacheSolve(x)
cacheSolve <- function(x,  ...) {
## Return a matrix that is the inverse of 'x'
x_inverted<-matrix(solve(x))
}
cacheSolve(x)
cacheSolve <- function(x,  ...) {
## Return a matrix that is the inverse of 'x'
x_inverted<-t(solve(x) %*% x)
}
cacheSolve(x)
solve(x)
x_invert<-solve(x)
cacheSolve <- function(x,  ...) {
## Return a matrix that is the inverse of 'x'
x<-matrix(c(1, 2, 4, 2, 3, 1, 5, 7, 8), nrow=3, ncol=3)
x_inverted<-(solve(x))
}
cacheSolve <- function(x,  ...) {
## Return a matrix that is the inverse of 'x'
x<-matrix(c(1, 2, 4, 2, 3, 1, 5, 7, 8), nrow=3, ncol=3)
x_inverted<-(solve(x))
}
cacheSolve(x)
cacheSolve <- function(x<-matrix(c(1, 2, 4, 2, 3, 1, 5, 7, 8), nrow=3, ncol=3),  ...) {
## Return a matrix that is the inverse of 'x'
x_inverted<-(solve(x))
}
x<-matrix(c(1, 2, 4, 2, 3, 1, 5, 7, 8), nrow=3, ncol=3)
cacheSolve <- function(x,  ...) {
## Return a matrix that is the inverse of 'x'
x_inverted<-(solve(x))
}
cacheSolve(x)
cacheSolve <- function(x,  ...) {
## Return a matrix that is the inverse of 'x'
x_trans<-t(x)
}
cacheSolve(x)
debug(cacheSolve)
cacheSolve(x)
cacheSolve <- function(x,  ...) {
## Return a matrix that is the inverse of 'x'
x_inverse<-solve(x)
}
debug(cacheSolve)
cacheSolve(x)
x_invert<-(solve(x)%*% c)
x_invert<-solve(x)%*% c
??solve
y<-matrix(c(1, 2, 4, 2, 3, 1, 5, 7, 8), nrow=3, ncol=3)
rm (x)
cacheSolve <- function(x,  ...) {
## Return a matrix that is the inverse of 'x'
x_invert<-solve(x)
}
cacheSolve(y)
y_invert<-solve(y)
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
x_invert<-solve(x)
}
cacheSolve(x)
x<-matrix(c(1, 2, 4, 2, 3, 1, 5, 7, 8), nrow=3, ncol=3)
cacheSolve(x)
cacheSolve <- function(x=matrix) {
## Return a matrix that is the inverse of 'x'
x_invert<-solve(x)
}
cacheSolve(x)
cacheSolve <- function(x=matrix) {
## Return a matrix that is the inverse of 'x'
y<- x$getmatrix
x$setmatrix(y)
x_invert<-solve(y,...)
x$setinverse(x_invert)
x_invert
}
cacheSolve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
y<- x$getmatrix
x$setmatrix(y)
x_invert<-solve(y,...)
x$setinverse(x_invert)
x_invert
}
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
#Save Inverse Matrix into cache memory
xinv<-NULL
}
inverse_x<-solve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
makematrix <-function (x=matrix()){
m <-NULL
set <-function (y) {
X <<-y
m <<-NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
makematrix <-function (x=matrix()){
m <-NULL
set <-function (y) {
X <<-y
m <<-NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve(x,c(1, 2, 4, 2, 3, 1, 5, 7, 8), nrow=3, ncol=3))
x<-matrix(c(1, 2, 4, 2, 3, 1, 5, 7, 8), nrow=3, ncol=3)
cacheSolve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
makematrix <-function (x=matrix()){
m <-NULL
set <-function (y) {
X <<-y
m <<-NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
makematrix <-function (x=matrix()){
m <-NULL
set <-function (y) {
X <<-y
m <<-NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
}
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
makematrix <-function (x=matrix()){
m <-NULL
set <-function (y) {
X <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
}
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
X <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
X <<-y
m <<-NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix <- function(x = matrix()) {
#Save Inverse Matrix into cache memory
m <- x$solve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setinverse(m)
m
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
inverse_x<-solve(x)
inverse_x<-solve(x)
m <- x$solve()
m <- solve(x)
m <- solve(x)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
y<-matrix(c(NA,NA,NA,NA),nrow=2,ncol=2)
m <- solve(y)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
x <- matrix(c(1, 2, 4, 2, 3, 1, 5, 7, 8), nrow=3, ncol=3)
cacheSolve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
m
}
cacheSolve(x)
inverse_x<-solve(x)
cacheSolve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve(m)) <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
m
}
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
x
}
cacheSolve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
solve(x)
}
cacheSolve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
y
}
cacheSove(x)
cacheSolve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
setinverse
}
cacheSolve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-solve(x)
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
setinverse
}
cacheSolve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
getinverse
}
cacheSolve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function(m)
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve(x)
cacheSolve <- function(x=matrix()) {
## Return a matrix that is the inverse of 'x'
m <-NULL
set <-function (y) {
x <<-y
m <<-NULL
}
get <- function(x)
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve(x)
