
 a <- NULL
+    set <- function(y) {
+        x <<- y
+        a <<- NULL
+    }
+    get <- function() x
+    setinverse <- function(solve) a <<- solve
+    getinverse <- function() a
+    list(set = set, get = get,
+         setinverse = setinverse,
+         getinverse = getinverse)
 }
 
-
-## Write a short comment describing this function
+## cacheSolve finds the inverse of the matrix entered in makeCacheMatrix and returns it,
+## either from the parent environment (if it has already been called) or by calculating it
+## for the first time.
 
 cacheSolve <- function(x, ...) {
-        ## Return a matrix that is the inverse of 'x'
-}
+    a <- x$getinverse()
+    if(!is.null(a)) {
+        message("getting cached data")
+        return(a)
+    }
+    data <- x$get()
+    a <- solve(data, ...)
+    x$setinverse(a)
+    a
+} 
