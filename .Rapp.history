source cacheMatrix.R
source cachematrix.R
source("cachematrix.R")
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
source("cachematrix.R")
m$get()
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
m$get()
cacheSolve(m)
?inverse
library(datasets)
data(iris)
?iris
iris
mean(iris$Sepal.Length)
mean( Sepal.Length ~ Species, data=iris )
dcast(molten, formula = Species ~ variable)
by(iris[,1:3], iris$Species, function(x) mean(x,na.rm=T))
by(iris[,1:3], iris$Species, mean())
by(iris[,1:3], iris$Species, mean(x))
by(iris[,1:3], iris$Species, function(x) mean(x,na.rm=T))
by(iris[,1], iris$Species, function(x) median(x,na.rm=T))
by(iris[,1], "virginica", function(x) median(x,na.rm=T))
by(iris[,1], iris["virginica"], function(x) median(x,na.rm=T))
aggregate(iris[,1:3], iris["Species"], function(x) mean(x,na.rm=T))
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
apply(iris[, 1:4], 2, average)
apply(mtcars)[, 1:4], 2, average)
apply(mtcars)[, 1:2], 2, average)
apply(mtcars)[, 1:2], 2, mean)
apply(mtcars)[, 1:], 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
let avg4cyl = mtcars.Data |> Seq.filter (fun x -> x.cyl = 4) |> Seq.averageBy (fun x -> float x.hp)#
let avg8cyl = mtcars.Data |> Seq.filter (fun x -> x.cyl = 8) |> Seq.averageBy (fun x -> float x.hp)#
abs(avg4cyl - avg8cyl)
avg4cyl = mtcars.Data |> Seq.filter (fun x -> x.cyl = 4) |> Seq.averageBy (fun x -> float x.hp)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
